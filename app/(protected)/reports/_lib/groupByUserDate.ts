export type SessionRecord = {
  user?: string | number | null;
  date: string;
  start?: string | null;
  end?: string | null;
  durationMin?: number | null;
  siteName?: string | null;
  workDescription?: string | null;
  machineId?: string | number | null;
  machineName?: string | null;
  autoGenerated?: boolean | null;
};

export type DailyGroup = {
  userKey: string;
  date: string;
  earliestStart: string | null;
  latestEnd: string | null;
  totalMin: number;
  workedH: number;
  overH: number;
  sessions: SessionRecord[];
};

function toKey(v: unknown) {
  if (v == null) return '';
  if (Array.isArray(v)) return String(v[0] ?? '');
  return String(v);
}

function minTime(a: string | null, b: string | null): string | null {
  if (!a) return b ?? null;
  if (!b) return a ?? null;
  return a < b ? a : b;
}
function maxTime(a: string | null, b: string | null): string | null {
  if (!a) return b ?? null;
  if (!b) return a ?? null;
  return a > b ? a : b;
}

export function groupByUserDate(rows: SessionRecord[]): DailyGroup[] {
  const map = new Map<string, DailyGroup>();
  for (const r of rows) {
    if (!r?.date) continue;
    const userKey = toKey(r.user);
    const key = `${userKey}__${r.date}`;
    const g =
      map.get(key) ?? {
        userKey,
        date: r.date,
        earliestStart: null,
        latestEnd: null,
        totalMin: 0,
        workedH: 0,
        overH: 0,
        sessions: [],
      };
    g.earliestStart = minTime(g.earliestStart, r.start ?? null);
    g.latestEnd = maxTime(g.latestEnd, r.end ?? null);
    g.totalMin += Number.isFinite(r.durationMin as number) ? (r.durationMin as number) : 0;
    g.sessions.push(r);
    map.set(key, g);
  }

  for (const g of map.values()) {
    const totalH = g.totalMin / 60;
    const worked = Math.max(0, totalH - 1.5);
    const over = Math.max(0, worked - 7.5);
    g.workedH = Number(worked.toFixed(2));
    g.overH = Number(over.toFixed(2));
  }

  return Array.from(map.values()).sort((a, b) => {
    if (a.date !== b.date) return a.date < b.date ? -1 : 1;
    const as = a.earliestStart ?? '';
    const bs = b.earliestStart ?? '';
    return as < bs ? -1 : as > bs ? 1 : 0;
  });
}
